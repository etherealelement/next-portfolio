"use client";
import {FC, FormEvent, MutableRefObject, useState, useRef} from 'react';
import styles from "./ContactForm.module.scss";
import {ContactInput} from "@/app/components/contact/ContactForm/ContactInput/Contactinput";
import {Button} from "@/app/components/ui/button/Button";
import Link from "next/link";
import emailjs from "@emailjs/browser"
import {toast} from "react-toastify";
import {PropagateLoader} from "react-spinners";


export const ContactForm: FC = ():JSX.Element => {
    const [spinner, setSpinner] = useState(false);
    const [acceptWithRules, setAcceptWithRules] = useState(false);
    const formRef: MutableRefObject<HTMLFormElement> = useRef() as MutableRefObject<HTMLFormElement>

    // –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ EmailJS —Å–µ—Ä–≤–µ—Ä
    const sendEmail = (e: FormEvent<HTMLFormElement>):void => {
        e.preventDefault();


        setSpinner(true)
        emailjs.sendForm("service_iwcwg32", "template_xf4putg",formRef.current, "Z1tp-R_4MiXr-iQ9a")
            .then(result => {
                setSpinner(false)
                toast(`–î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã üëå`)
            }, error => {
                setSpinner(false)
                toast(`–î–∞–Ω–Ω—ã–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã üò¢`)
            })

        formRef.current.reset()
    }


    const toggleAcceptWithRules = () => setAcceptWithRules(!acceptWithRules);

    return <form onSubmit={sendEmail} className={styles.contactForm} ref={formRef}>
        <ContactInput
            text="–§.–ò.–û.*"
            placeholder="–£–∫–∞–∂–∏—Ç–µ –≤–∞—à–∏ –§.–ò.–û."
            type="text"
            name="fullname"
        />
        <ContactInput
            text="–î–æ–ª–∂–Ω–æ—Å—Ç—å/–∫–æ–º–ø–∞–Ω–∏—è"
            placeholder="–£–∫–∞–∂–∏—Ç–µ –≤–∞—à—É –¥–æ–ª–∂–Ω–æ—Å—Ç—å/–∫–æ–º–ø–∞–Ω–∏—é"
            type="text"
            name="post/company"
        />
        <ContactInput
            text="E-mail*"
            placeholder="–£–∫–∞–∂–∏—Ç–µ –≤–∞—à E-mail"
            type="text"
            name="e-mail"
        />
        <ContactInput
            text="–¢–µ–ª–µ—Ñ–æ–Ω*"
            placeholder="–£–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω"
            type="text"
            name="phone"
        />
        <Button
            isDisable={!acceptWithRules}
        styleProp="long"
        >
            {spinner ? <PropagateLoader color="#fff"></PropagateLoader> : "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É"}
        </Button>
        <label htmlFor="" className={styles.contactFormCheckbox}>
            <input
                onChange={toggleAcceptWithRules}
                type="checkbox"
                className={styles.contactFormCheckboxInput}/>
            <span className={styles.contactFormCheckboxSpan}></span>
            <span className={styles.contactFormCheckboxText}>–ù–∞–∂–∏–º–∞—è –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É¬ª, —è —Å–æ–≥–ª–∞—à–∞—é—Å—å —Å <Link href={"/privacy-policy"} legacyBehavior>
                <a className={styles.contactFormCheckboxLink}>–ü–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏</a>
            </Link> –∏ –¥–∞—é <Link href={"/personal-data-of-clients"} legacyBehavior>
                <a className={styles.contactFormCheckboxLink}>–°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.</a>
            </Link></span>
        </label>
    </form>;
};